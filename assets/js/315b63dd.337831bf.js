"use strict";(self.webpackChunksynapseml=self.webpackChunksynapseml||[]).push([[6187],{3905:function(e,t,r){r.d(t,{Zo:function(){return c},kt:function(){return d}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},s=Object.keys(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=n.createContext({}),u=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},c=function(e){var t=u(e.components);return n.createElement(p.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,s=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),f=u(r),d=a,m=f["".concat(p,".").concat(d)]||f[d]||l[d]||s;return r?n.createElement(m,o(o({ref:t},c),{},{components:r})):n.createElement(m,o({ref:t},c))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=r.length,o=new Array(s);o[0]=f;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var u=2;u<s;u++)o[u]=r[u];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},2303:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return i},metadata:function(){return p},toc:function(){return u},default:function(){return l}});var n=r(7462),a=r(3366),s=(r(7294),r(3905)),o=["components"],i={title:"HttpOnSpark - Working with Arbitrary Web APIs",hide_title:!0,status:"stable",name:"HttpOnSpark - Working with Arbitrary Web APIs"},p={unversionedId:"features/http/HttpOnSpark - Working with Arbitrary Web APIs",id:"features/http/HttpOnSpark - Working with Arbitrary Web APIs",isDocsHomePage:!1,title:"HttpOnSpark - Working with Arbitrary Web APIs",description:'Use "dogs as a service" in a distributed fashion with HTTP on Spark',source:"@site/docs/features/http/HttpOnSpark - Working with Arbitrary Web APIs.md",sourceDirName:"features/http",slug:"/features/http/HttpOnSpark - Working with Arbitrary Web APIs",permalink:"/SynapseML/docs/next/features/http/HttpOnSpark - Working with Arbitrary Web APIs",version:"current",frontMatter:{title:"HttpOnSpark - Working with Arbitrary Web APIs",hide_title:!0,status:"stable",name:"HttpOnSpark - Working with Arbitrary Web APIs"},sidebar:"docs",previous:{title:"HTTP on Apache Spark",permalink:"/SynapseML/docs/next/features/http/about"},next:{title:"LightGBM on Apache Spark",permalink:"/SynapseML/docs/next/features/lightgbm/about"}},u=[{value:"Use &quot;dogs as a service&quot; in a distributed fashion with HTTP on Spark",id:"use-dogs-as-a-service-in-a-distributed-fashion-with-http-on-spark",children:[]}],c={toc:u};function l(e){var t=e.components,r=(0,a.Z)(e,o);return(0,s.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h3",{id:"use-dogs-as-a-service-in-a-distributed-fashion-with-http-on-spark"},'Use "dogs as a service" in a distributed fashion with HTTP on Spark'),(0,s.kt)("p",null,"In this example we will use the simple HTTP Transformer to call a public webAPI that returns random images of dogs. The service does not use the json payload, but this is for example purposes. "),(0,s.kt)("p",null,"A call to the dog service returns json objects structured like:"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},'{"status":"success","message":"https:\\/\\/images.dog.ceo\\/breeds\\/lhasa\\/n02098413_2536.jpg"}')),(0,s.kt)("p",null,"If you visit the link you can download the image:"),(0,s.kt)("img",{src:"https://images.dog.ceo//breeds//lhasa//n02098413_2536.jpg"}),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'import os\n\nif os.environ.get("AZURE_SERVICE", None) == "Microsoft.ProjectArcadia":\n    from pyspark.sql import SparkSession\n    spark = SparkSession.builder.getOrCreate()\n\nfrom pyspark.sql.functions import struct\nfrom pyspark.sql.types import *\nfrom synapse.ml.io.http import *\n\ndf = spark.createDataFrame([("foo",) for x in range(20)], ["data"]) \\\n      .withColumn("inputs", struct("data"))\n\nresponse_schema = StructType().add("status", StringType()).add("message", StringType())\n\nclient = SimpleHTTPTransformer() \\\n  .setInputCol("inputs") \\\n  .setInputParser(JSONInputParser()) \\\n  .setOutputParser(JSONOutputParser().setDataType(response_schema)) \\\n  .setOutputCol("results") \\\n  .setUrl("https://dog.ceo/api/breeds/image/random")\n\nresponses = client.transform(df)\nresponses.select("results").show(truncate = False)\n')))}l.isMDXComponent=!0}}]);